% Markov_Tones_v2 present sequences randomly, keep track of order of sequences
%
%   differs from original Markov_Tones in that entire sequence of five
%   tones is prepared first, so tone to tone timing is fixed. Also, keeps a
%   record of the sequences played, to make decoding the microphone signal
%   easier.
%
% JRI 12/09
%
% Cowen - added a mod that interfaced with the cheetah system.
%%
% omit 3rd tone on this proportion of stimuli
%pause(15*60)
pDrop3 = 0.20;

% from Markov_Tones_makesounds.m
if ~exist('Markov_Tones_sounds.mat','file'),
  Markov_Tones_makesounds
end
load Markov_Tones_sounds.mat

%to save a list of the stimuli we play
orderfile = ['stimulusOrder_' datestr(now, 'mm.dd.yy_HH.MM.SS') '.txt'];
if exist(orderfile,'file')
  error('stimulusOrder file already exists? Shouldn''t happen.')
end

fid = fopen(orderfile, 'w+');
%write an informative header
fprintf(fid,'stimulusOrder for sounds generated by Markov_Tones_v2\n');
fprintf(fid,'seq = [1 2 3 4 5; 5 4 3 2 1; 4 2 3 1 5]\n');
fprintf(fid,['freqs = ' num2str(FQ) '\n' ]);
fprintf(fid,'probabilty of dropping tone 3: %f\n\n',pDrop3);
%
fprintf(fid,'time\tseq_num\tdrop3\n');

fprintf(2,'\nsounds now playing...control-c to stop\n');
fprintf('A record of which sequences are presented will be saved in %s\n',orderfile);

%c = onCleanup(@()fclose(fid)); %file will be closed on control-c, maybe?

% loop endlessly, picking a random sequence, and whether or not to omit tone 3
while(1)
  seq_num = ceil(rand*3);
  drop3 = (rand<pDrop3);
  if drop3,
    snd = stim_missing3{seq_num};
  else
    snd = stim{seq_num};
  end
  tOn = now;
  
  sound(snd*0.9,sf);
  
  %record info about the sound that played
  fprintf(fid,'%f\t%d\t%d\n',tOn, seq_num, drop3);
  
  pause(2.5 + 1.2 + rand(1,1)*1.0) % Sounds are about 2.5 seconds long
end