function O = xmeans(D)
% Runs x-means (k-means with some efficiency and stopping criteria stuff
% added.) See Dan Pelleg and Andrew Moore CMU. This is a wrapper for their
% .exe file.
% 
% INPUT: the data, nsamples x nFeatures.
% OUTPUT: clusters.
O  = [];
[xmeans_dir,n,e] = fileparts(which('xmeans'));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Make data file.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fp = fopen('xmeans_data.txt','w');
fprintf(fp,'# num_rows = %d\n',size(D,1));
fprintf(fp,'# num_cols = %d\n',size(D,2));
fprintf(fp,'# num_classes = ?\n');
fprintf(fp,'# seed = ?\n');
fprintf(fp,'# sigma = ?\n');
fprintf(fp,'# Generated by xmeans.m\n');
for ii = 1:size(D,2)
    fprintf(fp,'x%d ',ii);
end
fprintf(fp,'\n');
%fprintf(fp,'%10.4f \n', D);
for ii = 1:rows(D)
    fprintf(fp,'%G ', D(ii,:));
    fprintf(fp,'\n');
end
fclose(fp);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Make config file.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fp = fopen('tmp_xmeans_config.txt','w');
fprintf(fp,'# ---------------------------------\n');
fprintf(fp,'# Xmeans from matlab---------------\n');
fprintf(fp,'# ---------------------------------\n');
fprintf(fp,'in xmeans_data.txt\n');
%fprintf(fp,'init_ctrs \n')
fprintf(fp,'save_ctrs xmeans_save_ctrs.txt\n');
fprintf(fp,'k 0\n');
fprintf(fp,'method blacklist\n');
%fprintf(fp,'min_box_width 0.001\n')
%fprintf(fp,'max_leaf_size 40\n')
fprintf(fp,'num_splits 5\n');
fprintf(fp,'prefix xmeans\n');
%fprintf(fp,'del_steps_ratio 0\n');
fprintf(fp,'printclusters xmeans_print.txt\n');
fprintf(fp,'split_stat BIC\n');
%fprintf(fp,'forced_split_fraction -1\n')
%fprintf(fp,'split_conf_level 0.9999\n')
fprintf(fp,'max_iter 200\n');
fprintf(fp,'max_ctrs 0\n');
fprintf(fp,'cutoff_factor 0.5\n');
fprintf(fp,'seed 1\n');
fprintf(fp,'create_universe true\n');
fprintf(fp,'run_demo false\n');
fclose(fp);
% Run the clustering program.
dos(fullfile(xmeans_dir,'kmeans_applic_wx.exe config tmp_xmeans_config.txt > xmeans_output.txt'));
% Collect the results.
O.cluster_centers = load('xmeans_save_ctrs.txt');
O.n_clusters = Rows(O.cluster_centers);
m = zeros(length(D),O.n_clusters);
for iC = 1:O.n_clusters
    cc = repmat(O.cluster_centers(iC,:));
    m(:,iC) = sqrt(sum((D - cc).^2)); % calculate euclidan distance here.
end
[mn,O.cluster_id] = min(m,2);

% determine group membership. This is dumb - but xmeans does not return
% group membership. There has to be a way around this.
%.cluster_id = kmeans(D,O.n_clusters,'start',O.cluster_centers(:));